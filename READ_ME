# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    READ_ME                                            :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: acarbajo <acarbajo@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/10/23 20:02:12 by acarbajo          #+#    #+#              #
#    Updated: 2025/10/23 20:15:15 by acarbajo         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

 Push_swap
¬øQu√© es el programa push_swap?

El programa push_swap recibe una lista de n√∫meros enteros a trav√©s de argumentos.
Su objetivo es ordenar los datos en orden ascendente utilizando un conjunto limitado de operaciones y dos pilas (stack a y stack b), en el menor n√∫mero posible de movimientos.
 ¬øQu√© es una pila?

Una pila (stack) es una estructura de datos que almacena elementos siguiendo la regla LIFO (Last In, First Out), es decir, el √∫ltimo elemento que entra es el primero que sale.

Operaciones b√°sicas:

Push: A√±adir un elemento al top de la pila.

Pop: Eliminar el elemento que est√° en el top.

Ejemplo visual:
Si apilas [1, 2, 3] (siendo 3 el √∫ltimo), el top es 3.
Si haces un pop, el 3 sale y el top pasa a ser 2.

 ¬øQu√© es un algoritmo de ordenaci√≥n?

Un algoritmo de ordenaci√≥n es un conjunto de pasos o reglas que permiten reorganizar los elementos de una lista en un orden determinado (por ejemplo, de menor a mayor).

Ejemplos comunes:

Bubble Sort: compara pares de elementos adyacentes y los intercambia si est√°n en orden incorrecto.

Insertion Sort: inserta cada elemento en su posici√≥n correcta dentro de una lista parcialmente ordenada.

Radix Sort: ordena n√∫meros considerando cada d√≠gito individual (ideal para grandes listas).

¬øQu√© es una lista o estructura anidada?

En C, una lista enlazada es una colecci√≥n de nodos que almacenan un valor y un puntero al siguiente nodo.
Permite insertar y eliminar elementos din√°micamente, a diferencia de los arrays.

En push_swap, se suele representar la pila como una lista enlazada donde cada nodo contiene:

el valor del n√∫mero,

su posici√≥n ordenada,

y un puntero al siguiente nodo.

 ¬øQu√© es la complejidad de un algoritmo?

La complejidad mide el tiempo o recursos que un algoritmo necesita para completarse seg√∫n el tama√±o de los datos de entrada.

Notaci√≥n Big O

Se usa la notaci√≥n O(n) para expresar la eficiencia:

O(1): constante, muy r√°pida.

O(n): lineal.

O(n¬≤): cuadr√°tica, crece mucho con la cantidad de datos.

O(n log n): eficiente para grandes vol√∫menes.

En push_swap, el objetivo es minimizar la complejidad total de los movimientos.

 Estrategia en el proyecto
 Parseo

Validar los argumentos recibidos.

Comprobar que no hay duplicados, caracteres no v√°lidos ni enteros fuera del rango int.

Convertir los datos en una lista (stack a).

 Sort Small (pocos n√∫meros)

Usar algoritmos simples como Bubble Sort o Insertion Sort.

Se implementan manualmente con las operaciones permitidas (sa, ra, rra, etc.).

 Sort Large (muchos n√∫meros)

Radix Sort: m√©todo eficiente basado en bits.

Sort in Chunks: una variante del radix adaptada al tama√±o del stack.

 Elementos clave del proyecto

Uso de listas enlazadas como representaci√≥n de las pilas.

Conjunto limitado de operaciones permitidas (sa, pb, ra, etc.).

Optimizaci√≥n de movimientos.

Control de errores y validaci√≥n de argumentos.

Comprensi√≥n de algoritmos y complejidad.

 Comandos disponibles
sa  # swap a
sb  # swap b
ss  # swap a y b
pa  # push a
pb  # push b
ra  # rotate a
rb  # rotate b
rr  # rotate a y b
rra # reverse rotate a
rrb # reverse rotate b
rrr # reverse rotate a y b

üöÄ C√≥mo ejecutar el proyecto

Compila el programa con el Makefile incluido:

make


Esto generar√° el ejecutable push_swap.

Ejemplo de uso:
./push_swap 2 1 3


Salida esperada:

sa


Para probar con un conjunto m√°s grande:

./push_swap 4 67 3 87 23


Puedes ver la lista de movimientos que tu programa genera para ordenar los n√∫meros.
Tambi√©n puedes verificar si el resultado est√° correctamente ordenado combin√°ndolo con el checker (si lo tienes implementado):

ARG="4 67 3 87 23"; ./push_swap $ARG | ./checker $ARG


Si est√° bien ordenado, el checker mostrar√° OK.
Si hay un error o el orden no es correcto, mostrar√° KO.

